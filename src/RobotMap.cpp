// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::drivetraindriveSRX1;
std::shared_ptr<CANTalon> RobotMap::drivetraindriveSRX2;
std::shared_ptr<CANTalon> RobotMap::drivetraindriveSRX3;
std::shared_ptr<CANTalon> RobotMap::drivetraindriveSRX4;
std::shared_ptr<RobotDrive> RobotMap::drivetraindriveTrain;
std::shared_ptr<PowerDistributionPanel> RobotMap::drivetrainpowerDistPanel;
std::shared_ptr<CANTalon> RobotMap::shootershooterTalon1;
std::shared_ptr<Encoder> RobotMap::shooterfrontWheelEncoder;
std::shared_ptr<PIDController> RobotMap::shooterfrontWheelPID;
std::shared_ptr<CANTalon> RobotMap::shootershooterTalon2;
std::shared_ptr<Encoder> RobotMap::shooterbackWheelEncoder;
std::shared_ptr<PIDController> RobotMap::shooterbackWheelPID;
std::shared_ptr<CANTalon> RobotMap::intakeintakeSpinTalon1;
std::shared_ptr<CANTalon> RobotMap::intakeintakeSpinTalon2;
std::shared_ptr<CANTalon> RobotMap::intakeintakeRotateTalon1;
std::shared_ptr<CANTalon> RobotMap::intakeintakeRotateTalon2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<AHRS> RobotMap::ahrs;


void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivetraindriveSRX1.reset(new CANTalon(0));
    lw->AddActuator("Drivetrain", "talon0", drivetraindriveSRX1);	// Drive motor upper-left
    
    drivetraindriveSRX2.reset(new CANTalon(1));
    lw->AddActuator("Drivetrain", "talon1", drivetraindriveSRX2);	// Drive motor upper-right
    
    drivetraindriveSRX3.reset(new CANTalon(2));
    lw->AddActuator("Drivetrain", "talon2", drivetraindriveSRX3);	// Drive motor lower-left
    
    drivetraindriveSRX4.reset(new CANTalon(3));
    lw->AddActuator("Drivetrain", "talon3", drivetraindriveSRX4);	// Drive motor loer-right
    
    drivetraindriveTrain.reset(new RobotDrive(drivetraindriveSRX1, drivetraindriveSRX2,
              drivetraindriveSRX3, drivetraindriveSRX4));
    
    drivetraindriveTrain->SetSafetyEnabled(true);
        drivetraindriveTrain->SetExpiration(0.1);
        drivetraindriveTrain->SetSensitivity(0.5);
        drivetraindriveTrain->SetMaxOutput(1.0);
        drivetraindriveTrain->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
        drivetraindriveTrain->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
    drivetrainpowerDistPanel.reset(new PowerDistributionPanel(20));
    lw->AddSensor("Drivetrain", "powerDistPanel", drivetrainpowerDistPanel);
    
    shootershooterTalon1.reset(new CANTalon(4));
    lw->AddActuator("Shooter", "talon4", shootershooterTalon1);	// Shooting motor front
    
    shooterfrontWheelEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("Shooter", "frontWheelEncoder", shooterfrontWheelEncoder);
    shooterfrontWheelEncoder->SetDistancePerPulse(1.0);
    shooterfrontWheelEncoder->SetPIDSourceType(PIDSourceType::kRate);
    shooterfrontWheelPID.reset(new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ shooterfrontWheelEncoder.get(), shootershooterTalon1.get(), 0.02));
    lw->AddActuator("Shooter", "frontWheelPID", shooterfrontWheelPID);
    shooterfrontWheelPID->SetContinuous(false); shooterfrontWheelPID->SetAbsoluteTolerance(0.2); 
        shooterfrontWheelPID->SetOutputRange(-1.0, 1.0);
    shootershooterTalon2.reset(new CANTalon(5));
    lw->AddActuator("Shooter", "talon5", shootershooterTalon2);	// Shooting motor back
    
    shooterbackWheelEncoder.reset(new Encoder(2, 3, false, Encoder::k4X));
    lw->AddSensor("Shooter", "backWheelEncoder", shooterbackWheelEncoder);
    shooterbackWheelEncoder->SetDistancePerPulse(1.0);
    shooterbackWheelEncoder->SetPIDSourceType(PIDSourceType::kRate);
    shooterbackWheelPID.reset(new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ shooterbackWheelEncoder.get(), shootershooterTalon2.get(), 0.02));
    lw->AddActuator("Shooter", "backWheelPID", shooterbackWheelPID);
    shooterbackWheelPID->SetContinuous(false); shooterbackWheelPID->SetAbsoluteTolerance(0.2); 
        shooterbackWheelPID->SetOutputRange(-1.0, 1.0);
    intakeintakeSpinTalon1.reset(new CANTalon(6));
    lw->AddActuator("Intake", "talon6", intakeintakeSpinTalon1);	// Intake front-left
    
    intakeintakeSpinTalon2.reset(new CANTalon(7));
    lw->AddActuator("Intake", "talon7", intakeintakeSpinTalon2);	// Intake back-left
    
    intakeintakeRotateTalon1.reset(new CANTalon(8));
    lw->AddActuator("Intake", "talon8", intakeintakeRotateTalon1);	// Intake front-right
    
    intakeintakeRotateTalon2.reset(new CANTalon(9));
    lw->AddActuator("Intake", "talon9", intakeintakeRotateTalon2);	// Intake back-left
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    ahrs.reset(new AHRS(SPI::Port::kMXP));

}
