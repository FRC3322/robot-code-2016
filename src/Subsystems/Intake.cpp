// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Intake.h"
#include "../RobotMap.h"
#include "../Robot.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Intake::Intake() : Subsystem("Intake") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    intakeSpinTalon1 = RobotMap::intakeintakeSpinTalon1;
    intakeSpinTalon2 = RobotMap::intakeintakeSpinTalon2;
    intakeRotateTalon1 = RobotMap::intakeintakeRotateTalon1;
    intakeRotateTalon2 = RobotMap::intakeintakeRotateTalon2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    intakeSpinTalon2->SetControlMode(CANSpeedController::kFollower);
//    intakeSpin
//    intakeRotateTalon2->SetControlMode(CANSpeedController::kFollower);
//    intakeRotateTalon2->Set(6);
    spinTalonRunning = false;

    intakeRotateTalon2->SetControlMode(CANTalon::ControlMode::kFollower);
    intakeRotateTalon2->Set(3);
    intakeRotateTalon2->SetInverted(true);
}

void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Intake::takeBallIn(){
	intakeSpinTalon1->Set(-1);
	intakeSpinTalon2->Set(-1);
	spinTalonRunning = true;

//	intakeRotateTalon1->Set(-.4);
}
void Intake::takeBallIn2(){ //Deprecated
	intakeSpinTalon2->Set(-1);
	spinTalon2Running = true;
}
void Intake::stopSpinner(){
	intakeSpinTalon1->Set(0);
	intakeSpinTalon2->Set(0);
//	intakeRotateTalon2->Set(0);
	spinTalonRunning = false;

}
void Intake::stopSpinner2(){
	intakeSpinTalon2->Set(0); //deprecated
	spinTalon2Running = false;
}

void Intake::moveArm(float speed){
	intakeRotateTalon1->Set(speed);
//	intakeRotateTalon2->Set(speed);

}

bool Intake::spinnerIsRunning(){
	return spinTalonRunning;

}
bool Intake::spinner2IsRunning(){
	return spinTalon2Running;
}
void Intake::init(){
	intakeSpinTalon1->Enable();
	intakeSpinTalon2->Enable();
	intakeRotateTalon1->Enable();
	intakeRotateTalon2->Enable();

	intakeSpinTalon1->Set(0);
	intakeSpinTalon2->Set(0);
	intakeRotateTalon1->Set(0);
//	intakeRotateTalon2->Set(0);

}
void Intake::setPosition(int setpoint,float p,float i,float d,float f){

//	RobotMap::intakeEncoder->Reset();
	RobotMap::intakePID->SetPID(p,i,d,f);
	RobotMap::intakePID->Enable();
	RobotMap::intakePID->SetSetpoint(setpoint);
}
void Intake::grabBall(){
	intakeSpinTalon1->Set(.2);
	intakeSpinTalon2->Set(-.7);
	intakeRotateTalon1->Set(Intake::calculatePID(-270,RobotMap::intakeEncoder->GetDistance(),.015,0,.08));
}
void Intake::holdBall(){
	intakeSpinTalon1->Set(0);
	intakeRotateTalon1->Set(Intake::calculatePID(-300,RobotMap::intakeEncoder->GetDistance(),.015,0,.08));
}
double Intake::calculatePID(double setpoint, double current, double Kp, double Ki, double Kd){
	double encoderAngle = (-285.5-current)*(3.1415/2)/(-182.75);
//	printf("encoder angle %f",encoderAngle);
	f = .4*cos(encoderAngle);

	double dVal = 0;
	Ki = 0.0000;
	double iVal = previousIVal + (double)setpoint-(double)current;
//	printf("IVal %f",iVal);
	if(previous != 0){
		dVal = ((double)current-(double)previous)*Kd;
//		printf("Dval %f",dVal);
	}
	previousIVal = iVal;
	previous = current;
//	return f;

	return (Kp*(setpoint-current) + f)+(iVal*Ki)+-dVal; //there used to be an f term here. maybe that's why its jittery?

}
void Intake::loadingBall(double cycleStartTime){
	intakeDone = false;
	Robot::shooter->testPID(11.80);
	printf("cycle start time %f ",cycleStartTime);
	printf("if statement value %f",(Timer::GetFPGATimestamp()-.5));
	if((Timer::GetFPGATimestamp())>(cycleStartTime)){
		intakeSpinTalon1->Set(1);
		intakeSpinTalon2->Set(-1);
	}
	if((Timer::GetFPGATimestamp()-1.55)>(double)cycleStartTime){
//		intakeRotateTalon1->Set(Intake::calculatePID(0,RobotMap::intakeEncoder->Get(),.02,0,.08));
		intakeDone = true;
		readyToShoot = false;
	}
	if((Timer::GetFPGATimestamp()-2.5)>(double)cycleStartTime){
		intakeSpinTalon1->Set(0);
		intakeSpinTalon2->Set(0);
		Robot::shooter->testPID(0);
//		RobotMap::intakeEncoder->Reset();

		SmartDashboard::PutNumber("thing happened! ",cycleStartTime);
	}

}
void Intake::stopIntakeSpinners(){
	intakeSpinTalon1->Set(0);
	intakeSpinTalon2->Set(0);
}
//void Intake::spinBack(){

//}
