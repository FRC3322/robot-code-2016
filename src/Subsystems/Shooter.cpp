// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : Subsystem("Shooter") {
    shooterBackTalon = RobotMap::shootershooterTalon1;
    shooterFrontTalon = RobotMap::shootershooterTalon2;

}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Shooter::shootRaw(){
	shooterBackTalon->Set(-.8);
	shooterFrontTalon->Set(-.9);
}
void Shooter::testPID(float setpointFront){
//	frontWheelPID->SetPID(pF,iF,dF);
//	backWheelPID->SetPID(pF,iF,dF);
//	frontWheelPID->SetSetpoint(setpointFront);
//	backWheelPID->SetSetpoint(setpointRear);
//	shooterFrontTalon->SetP(pF);
//	shooterFrontTalon->SetP(iF);
//	shooterFrontTalon->SetP(dF);
	shooterBackTalon->SetControlMode(CANTalon::ControlMode::kFollower);
	shooterBackTalon->Set(10);
	shooterFrontTalon->SelectProfileSlot(0);
	shooterFrontTalon->SetSensorDirection(true);
	shooterFrontTalon->SetControlMode(CANTalon::ControlMode::kSpeed);
	shooterFrontTalon->Set(4096*setpointFront);
}
void Shooter::stopShooter(){
	shooterFrontTalon->SelectProfileSlot(1);
//	shooterFrontTalon->Set(0);
}
void Shooter::initShooter(){
	shooterBackTalon->Enable();
	shooterFrontTalon->Enable();
}
int Shooter::returnVel(){
	return shooterFrontTalon->GetEncVel();
}
float Shooter::returnVoltVal(){
	return shooterFrontTalon->GetOutputVoltage();
//	return 1;
}
float Shooter::returnAmpVal(){
	return shooterFrontTalon->GetOutputCurrent();
}
void Shooter::shootAuton3(){
	shooterFrontTalon->SelectProfileSlot(0);
	shooterFrontTalon->SetControlMode(CANTalon::ControlMode::kSpeed);
	shooterFrontTalon->Set(46000);
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

