// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

float voltage[15];
int i = 0;
Shooter::Shooter() : Subsystem("Shooter") {
    shooterBackTalon = RobotMap::shootershooterTalon1;
    shooterFrontTalon = RobotMap::shootershooterTalon2;

}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Shooter::shootRaw(){
	shooterBackTalon->Set(-.8);
	shooterFrontTalon->Set(-.9);
}

void Shooter::shootTeleop(){
	shooterFrontTalon->SetControlMode(CANTalon::ControlMode::kFollower);
	shooterFrontTalon->Set(10);
	shooterBackTalon->SelectProfileSlot(0);
	shooterFrontTalon->SetSensorDirection(false);
	shooterBackTalon->SetControlMode(CANTalon::ControlMode::kSpeed);
	shooterBackTalon->Set(-4096*19);
}

void Shooter::testPID(float setpointFront){
//	frontWheelPID->SetPID(pF,iF,dF);
//	backWheelPID->SetPID(pF,iF,dF);
//	frontWheelPID->SetSetpoint(setpointFront);
//	backWheelPID->SetSetpoint(setpointRear);
//	shooterFrontTalon->SetP(pF);
//	shooterFrontTalon->SetP(iF);
//	shooterFrontTalon->SetP(dF);
	shooterFrontTalon->SetControlMode(CANTalon::ControlMode::kFollower);
	shooterFrontTalon->Set(10);
	shooterBackTalon->SelectProfileSlot(0);
	shooterFrontTalon->SetSensorDirection(false);
	shooterBackTalon->SetControlMode(CANTalon::ControlMode::kSpeed);
	shooterBackTalon->Set(-4096*setpointFront);//
//	shooterFrontTalon->Set(-4096*setpointFront);
//	shooterFrontTalon->Set(10);

}

void Shooter::stopShooter(){
	shooterBackTalon->SelectProfileSlot(1);
	shooterBackTalon->Set(0);
}

void Shooter::initShooter(){
	shooterBackTalon->Enable();
	shooterFrontTalon->Enable();
}
float Shooter::returnVelocity(){
	return shooterFrontTalon->GetEncVel();
}
bool Shooter::hasShot(){
	/*
	 * See if the current voltage is more than 2 volts below the
	 * mean of the last 250ms
	 */
	float sum;
	for(int j = 0; i  = 15; j++){
		sum = sum + voltage[j];
	}
	float average = sum/5;
	if( (average - voltage[i]) > 2){
		Robot::shooter->killShooter();
	}
}
void Shooter::recordVoltage(){
	voltage[i] = shooterFrontTalon->GetOutputVoltage();
	i++;
	if(i>15){
		i=0;
	}
}
float Shooter::returnVoltVal(){
	return shooterFrontTalon->GetOutputVoltage();
}

float Shooter::returnAmpVal(){
	return shooterFrontTalon->GetOutputCurrent();
}

void Shooter::shootAuton3(){
	shooterFrontTalon->SelectProfileSlot(0);
	shooterFrontTalon->SetControlMode(CANTalon::ControlMode::kSpeed);
	shooterFrontTalon->Set(46000);
}
