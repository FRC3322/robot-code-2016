// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef INTAKE_H
#define INTAKE_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Intake: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	bool spinTalonRunning;
	bool spinTalon2Running;

public:
	Intake();
	void InitDefaultCommand();
	void takeBallIn();
	void moveArm(float speed);
	void stopSpinner();
	bool spinnerIsRunning();
	bool spinner2IsRunning();
	void init();
	void setPosition(int setpoint,float p,float i,float d,float f);
	void takeBallIn2();
	void stopSpinner2();
	std::shared_ptr<CANTalon> intakeRotateTalon1;
	std::shared_ptr<CANTalon> intakeRotateTalon2;
	std::shared_ptr<CANTalon> intakeSpinTalon1;
	std::shared_ptr<CANTalon> intakeSpinTalon2;

	void grabBall();
	double f;
	double pi = 3.1415;
	double previous = 0;
	double maxEncoder = 0;
	double previousError = 0;

	double calculatePID(double setpoint, double current, double p, double i, double d);
	double iVal = 0;
	double previousIVal = 0;

	void holdBall();
	void loadingBall(double cycleStartTime);
	void resetIntake();
	void stopIntakeSpinners();
	void spinBack();

	bool intakeDone = false;
	bool readyToShoot = true;
	bool loadingball = false;
};

#endif
