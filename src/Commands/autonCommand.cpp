// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "autonCommand.h"
#include "vision.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

autonCommand::autonCommand(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void autonCommand::Initialize() {
	autonNumber = SmartDashboard::GetNumber("Auton Number: ",1);
}

// Called repeatedly when this Command is scheduled to run
void autonCommand::Execute() {
	encoderValue = (Robot::drivetrain->driveSRX1->GetEncPosition()+Robot::drivetrain->driveSRX3->GetEncPosition())/2;
	if(encoderValue<=1000){
		autonState = 0;
	}
	else if(1000<encoderValue<=2000){
		autonState = 1;
	}
	else if(2000<encoderValue<=2785){
		autonState = 2;
	}
	switch(autonNumber){
	case 1://drive to outerworks by way of encoder
		auton1();
		break;
	case 2://drive under lowbar using NavX and encoders
		auton2();
		break;
	case 3://drive under lowbar using NavX and sonar, turn right, drive and shoot in high goal (no camera)
		auton3();
		break;
	case 4://drive straight over a rough terrain, then shoot high goal
		auton4();
		break;
	default:
		auton1();
		break;
	}

}

// Make this return true when this Command no longer needs to run execute()
bool autonCommand::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void autonCommand::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void autonCommand::Interrupted() {

}
void autonCommand::auton1(){
	//drive to outerworks by drivetrain encoders
	if(autonState==0){
		Robot::drivetrain->driveToAngle(.5,0);
	}
}
void autonCommand::auton2(){
	//drive under lowbar using NavX and drivetrain encoders
	if( autonState == 0){
		Robot::drivetrain->driveToAngle(.8,0);
	}
	else if(autonState == 1){
		Robot::drivetrain->driveToAngle(.9,0);
	}
}
void autonCommand::auton3(){
	//drive under lowbar, turn right, drive, then shoot
	if(autonState == 0){
		Robot::drivetrain->driveToAngle(.8,0);
	}
	else if(autonState == 1){
		Robot::drivetrain->driveToAngle(.9,0);
	}
	else if(autonState == 2){
		Robot::drivetrain->driveToAngle(.3,43);
	}
	else if(autonState == 3){
		Robot::shooter->shootAuton3();
	}
}
void autonCommand::auton4(){
	if(autonState == 0){
		Robot::drivetrain->driveToAngle(.8,0);
	}
	else if(autonState == 1){
		Robot::drivetrain->driveToAngle(.9,0);
	}
	else if(autonState == 2){
		Robot::drivetrain->driveToAngle(.3,43);
	}
	else if(autonState == 3){
		//process image, get angle to target
//		anlgeToTarget = visionProc().GetAngle();
		if(angleToTarget != NULL){
			autonState = 4;
		}
	}
	else if(autonState ==4){
		Robot::drivetrain->driveToAngle(0,angleToTarget);
	}
}
