// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "autonCommand.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
autonCommand::autonCommand(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
	Requires(Robot::catA.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void autonCommand::Initialize() {
	firstTime=true;
	autonNumber = SmartDashboard::GetNumber("autonNumber",1);
	startTime = Timer::GetFPGATimestamp();

}

// Called repeatedly when this Command is scheduled to run
void autonCommand::Execute() {
	switch(autonNumber){
	case 1:
		//portcullis
		auton1();
		break;
	case 2:
		//chivel de frise
		auton2();
		break;
	case 3:
		//rough terrain
		auton3();
		break;
	case 4:
		//moat
		auton4();
		break;
	case 5:
		//low bar simple
		auton5();
		break;
	case 6:
		//low bar with shot
		break;
	case 7:
		//do nothing
		break;
	case 8:
		//reach
		break;
	default:
		auton1();
		break;
	}

}

// Make this return true when this Command no longer needs to run execute()
bool autonCommand::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void autonCommand::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void autonCommand::Interrupted() {

}
void autonCommand::auton1(){
	//portcullis.  Tested and works on home field.
	if(Timer::GetFPGATimestamp()<startTime+3){
		Robot::intake->intakeRotateTalon1->Set(-.45);
		Robot::intake->intakeRotateTalon2->Set(-.45);
		Robot::catA->portcollisInit();
		Robot::catA->moveArm();
		Robot::drivetrain->driveToAngle(-.65,0);
	}
	else if(Timer::GetFPGATimestamp()<startTime+8){
		Robot::catA->portcollisInit();
		Robot::catA->moveArm();
		Robot::drivetrain->driveToAngle(-.86,0);
	}
	else {
		Robot::drivetrain->driveToAngle(0,0);
		Robot::catA->stop(); //reduce motor strain
	}

}
void autonCommand::auton2(){
	//chivel de frise
	SmartDashboard::PutBoolean("Chival de Frise",true);
	if(Timer::GetFPGATimestamp()<startTime+5.5){
		Robot::drivetrain->driveToAngle(-.55,0);
		Robot::catA->portcollisLift();
		Robot::catA->moveArm();
	}
	else if(Timer::GetFPGATimestamp()<startTime+5.95){
		Robot::catA->portcollisInit();
		Robot::catA->moveArm();
		Robot::drivetrain->driveToAngle(.55,0);
	}
	else if(Timer::GetFPGATimestamp()<startTime+8){
		Robot::drivetrain->driveToAngle(-.95,0);
	}
	else{
		Robot::drivetrain->driveToAngle(0,0);
	}
}
void autonCommand::auton3(){
	//rough terrain.  Tested and works on home field.
	if(Timer::GetFPGATimestamp()<startTime+3){
		Robot::drivetrain->driveToAngle(-0.6,0);
	}
	else if(Timer::GetFPGATimestamp()<startTime+5){
		Robot::drivetrain->driveToAngle(-1,0);
	}
	else{
		Robot::drivetrain->driveToAngle(-.4,0); //slightly reduced speed here.  Beware of waggle!
	}
}
void autonCommand::auton4(){
	//moat
	Robot::drivetrain->driveToAngle(-0.6,0);
}
void autonCommand::auton5(){
	//low bar no shot

	if(Timer::GetFPGATimestamp()<startTime+3){
		Robot::intake->intakeRotateTalon1->Set(-.45);
		Robot::intake->intakeRotateTalon2->Set(-.45);
		Robot::catA->portcollisInit();
		Robot::catA->moveArm();
		Robot::drivetrain->driveToAngle(-.75,0);
	}
	else if(Timer::GetFPGATimestamp()<startTime+5){
		Robot::catA->portcollisInit();
		Robot::catA->moveArm();
		Robot::drivetrain->driveToAngle(-.85,0);
	}
	else {
		Robot::drivetrain->driveToAngle(0,0);
		Robot::catA->stop(); //reduce motor strain
	}
}
void autonCommand::auton6(){
	//low bar with shot (unlikely to be done before vision targeting happens)
}
void autonCommand::auton7(){
	//do nothing...something is probably very broken :-(
}
void autonCommand::auton8(){
	//REACH any defense
	if(Timer::GetFPGATimestamp()<startTime+5){
		Robot::drivetrain->driveToAngle(-.5,0);
	}
	else
		Robot::drivetrain->driveToAngle(0,0);
}
