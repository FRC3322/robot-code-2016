// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::drivetraindriveSRX1;
std::shared_ptr<CANTalon> RobotMap::drivetraindriveSRX2;
std::shared_ptr<CANTalon> RobotMap::drivetraindriveSRX3;
std::shared_ptr<CANTalon> RobotMap::drivetraindriveSRX4;
std::shared_ptr<RobotDrive> RobotMap::drivetraindriveTrain;
std::shared_ptr<PowerDistributionPanel> RobotMap::drivetrainpowerDistPanel;
std::shared_ptr<DoubleSolenoid> RobotMap::drivetraingearshiftRight;
std::shared_ptr<DoubleSolenoid> RobotMap::drivetraingearshiftLeft;
std::shared_ptr<CANTalon> RobotMap::shootershooterTalon1;
std::shared_ptr<Encoder> RobotMap::shooterfrontWheelEncoder;
std::shared_ptr<PIDController> RobotMap::shooterfrontWheelPID;
std::shared_ptr<CANTalon> RobotMap::shootershooterTalon2;
std::shared_ptr<Encoder> RobotMap::shooterbackWheelEncoder;
std::shared_ptr<PIDController> RobotMap::shooterbackWheelPID;
std::shared_ptr<CANTalon> RobotMap::intakeintakeSpinTalon1;
std::shared_ptr<CANTalon> RobotMap::intakeintakeSpinTalon2;
std::shared_ptr<CANTalon> RobotMap::intakeintakeRotateTalon1;
std::shared_ptr<CANTalon> RobotMap::intakeintakeRotateTalon2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<AHRS> RobotMap::ahrs;
std::shared_ptr<PIDController> RobotMap::intakePID;
std::shared_ptr<Encoder> RobotMap::intakeEncoder;


void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivetraindriveSRX1.reset(new CANTalon(0));
    lw->AddActuator("Drivetrain", "talon0", drivetraindriveSRX1);	// Drive motor upper-left
    
    drivetraindriveSRX2.reset(new CANTalon(1));
    lw->AddActuator("Drivetrain", "talon1", drivetraindriveSRX2);	// Drive motor upper-right
    
    drivetraindriveSRX3.reset(new CANTalon(8));
    lw->AddActuator("Drivetrain", "talon2", drivetraindriveSRX3);	// Drive motor lower-left
    
    drivetraindriveSRX4.reset(new CANTalon(9));
    lw->AddActuator("Drivetrain", "talon3", drivetraindriveSRX4);	// Drive motor loer-right
    
    drivetraindriveTrain.reset(new RobotDrive(drivetraindriveSRX1, drivetraindriveSRX2,
              drivetraindriveSRX3, drivetraindriveSRX4));
    
    drivetraindriveTrain->SetSafetyEnabled(false);
        drivetraindriveTrain->SetExpiration(0.1);
        drivetraindriveTrain->SetSensitivity(0.5);
        drivetraindriveTrain->SetMaxOutput(1.0);
//        drivetraindriveTrain->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
//        drivetraindriveTrain->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
    drivetrainpowerDistPanel.reset(new PowerDistributionPanel(20));
    lw->AddSensor("Drivetrain", "powerDistPanel", drivetrainpowerDistPanel);
    
    drivetraingearshiftRight.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Drivetrain", "gearshiftRight", drivetraingearshiftRight);
    
    drivetraingearshiftLeft.reset(new DoubleSolenoid(0, 2, 3));
    lw->AddActuator("Drivetrain", "gearshiftLeft", drivetraingearshiftLeft);
    


    shootershooterTalon1.reset(new CANTalon(2));
    lw->AddActuator("Shooter", "talon4", shootershooterTalon1);	// Shooting motor front
    
    shootershooterTalon2.reset(new CANTalon(10));
    lw->AddActuator("Shooter", "talon5", shootershooterTalon2);	// Shooting motor back
    
    intakeintakeSpinTalon1.reset(new CANTalon(3));
    lw->AddActuator("Intake", "talon6", intakeintakeSpinTalon1);	// Intake front-left
    
    intakeintakeSpinTalon2.reset(new CANTalon(7));
    lw->AddActuator("Intake", "talon7", intakeintakeSpinTalon2);	// Intake back-left
    
    intakeintakeRotateTalon1.reset(new CANTalon(4));
    lw->AddActuator("Intake", "talon8", intakeintakeRotateTalon1);	// Intake front-right
    intakeintakeRotateTalon1->SetSafetyEnabled(false);
    
    intakeintakeRotateTalon2.reset(new CANTalon(5));
    intakeintakeRotateTalon2->SetSafetyEnabled(false);
    lw->AddActuator("Intake", "talon9", intakeintakeRotateTalon2);	// Intake back-left
    
    intakeEncoder.reset(new Encoder(0,1,false,Encoder::k4X));
    intakeEncoder->SetPIDSourceType(PIDSourceType::kDisplacement);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    ahrs.reset(new AHRS(SPI::Port::kMXP));
    intakePID.reset(new PIDController(2,0.0,0.0,intakeEncoder.get(),intakeintakeRotateTalon1.get()));
    intakePID->SetContinuous(false);
    intakePID->SetOutputRange(-1.0,1.0);


}
